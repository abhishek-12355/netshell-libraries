package com.netshell.libraries.test.core;

import org.apache.derby.tools.ij;

import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.sql.*;
import java.util.List;
import java.util.function.Consumer;

/**
 * This class is designed to be used as an in-memory db for testing framework components
 *
 * @author Abhishek
 * @since 10/15/2016.
 */
public final class DerbyUtils {
    private static final String DBNAME_PLACEHOLDER = "DBNAME";
    private static final String CONN_URL = "jdbc:derby:memory:" + DBNAME_PLACEHOLDER;
    private static final String CONN_CREATE_URL = CONN_URL + ";create=true";
    private static final String CONN_DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";

    private DerbyUtils() {

    }

    /**
     * Execute {@code query} on DB {@code dbName}. The result would be consumed by {@code consumer}
     *
     * @param dbName   name of the db to connect to
     * @param query    query that would be executed
     * @param consumer {@link Consumer} which will consume the result generated by query.
     * @throws SQLException unable to query
     */
    public static void executeQuery(final String dbName, final String query, final Consumer<ResultSet> consumer) throws SQLException {
        try (final Connection connection = getConnection(dbName)) {
            final ResultSet resultSet = connection.createStatement().executeQuery(query);
            if (resultSet != null) {
                consumer.accept(resultSet);
            }
        }
    }

    /**
     * Create a connection to derby
     *
     * @param dbName name of the db to connect to
     * @return {@link Connection} Connection to Derby DB {@code dbName}
     */
    public static Connection getConnection(final String dbName) {
        try {
            return DriverManager.getConnection(CONN_URL.replace(DBNAME_PLACEHOLDER, dbName));
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Execute an update on DB {@code dbName}
     *
     * @param dbName name of the db to connect to
     * @param query  query that would be executed
     * @return number of rows effected.
     * @throws SQLException unable to update
     */
    public static int executeUpdate(final String dbName, final String query) throws SQLException {
        try (final Connection connection = getConnection(dbName)) {
            return connection.createStatement().executeUpdate(query);
        }
    }

    /**
     * @param dbName   name of the db to connect to
     * @param filesISs List of {@link InputStream} to read scripts
     * @throws SQLException                 unable to execute scripts
     * @throws UnsupportedEncodingException the operation is not supported
     */
    public static void executeScripts(final String dbName, final List<InputStream> filesISs) throws SQLException, UnsupportedEncodingException {
        try (final Connection connection = getConnection(dbName)) {
            final boolean originalCommit = connection.getAutoCommit();
            connection.setAutoCommit(false);

            for (InputStream sqlFile : filesISs) {
                ij.runScript(connection, sqlFile, "UTF-8", System.out, "UTF-8");
            }

            connection.commit();
            connection.setAutoCommit(originalCommit);
        }
    }

    /**
     * Create a new in-memory database with name {@code dbName}
     *
     * @param dbName          name of the db to create
     * @param schemaCreateSql schema to be created in db {@code dbName}
     */
    public static void setup(final String dbName, final String schemaCreateSql) {
        try {
            Class.forName(CONN_DRIVER);
            try (Connection conn = DriverManager.getConnection(CONN_CREATE_URL.replace(DBNAME_PLACEHOLDER, dbName));
                 Statement stmt = conn.createStatement()) {
                int res = stmt.executeUpdate(schemaCreateSql);
                if (res != 0) {
                    throw new IllegalStateException("could not create test table.");
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Destroy the database
     *
     * @param dbName    name of the db to destroy
     * @param tableName name of table to truncate before destroying {@code dbName}
     */
    public static void tearDown(final String dbName, final String tableName) {
        try (Connection conn = DriverManager.getConnection(CONN_URL.replace(DBNAME_PLACEHOLDER, dbName))) {
            conn.createStatement().executeUpdate("truncate table " + tableName);
        } catch (final SQLNonTransientConnectionException ex) {
            if (ex.getSQLState().equals("08006")) {
                // ignore according to Derby's documentation, it indicates success.
                return;
            }
            throw new RuntimeException(ex);

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

}
